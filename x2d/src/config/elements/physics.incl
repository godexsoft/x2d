//
//  physics.incl
//  x2d
//
//  Created by Alex Kremer on 1/7/12.
//  Copyright (c) 2012 godexsoft. All rights reserved.
//

class body_part_cfg;

/**
 * @brief Support for '<body>' configuration node.
 */ 
class body_cfg
: public cfg_base
{
public:        
    /**
     * @param[in] c         Configuration object
     * @param[in] k         Kernel object
     * @param[in] dynamic   Whether body is dynamic
     */
    body_cfg(configuration& c, kernel& k, bool dynamic, bool bullet, bool fixed_rotation)
    : config_(c)
    , kernel_(k)
    , dynamic_(dynamic)
    , bullet_(bullet)
    , fixed_rotation_(fixed_rotation)
    {        
    }
    
    /**
     * Create a new body instance and return it without saving a local copy.
     */
    boost::shared_ptr<body> create(object& obj);        
                            
    void add(const std::string& part_key) 
    {
        parts_.push_back(part_key);
    }
    
    void set_dynamic(const bool dynamic)
    {
        dynamic_ = dynamic;
    }

    void set_bullet(const bool bullet)
    {
        bullet_ = bullet;
    }
    
    void set_fixed_rotation(const bool fixed_rotation)
    {
        fixed_rotation_ = fixed_rotation;
    }
private:                
    configuration&              config_;
    kernel&                     kernel_;
    
    bool                        dynamic_;
    bool                        bullet_;
    bool                        fixed_rotation_;
    std::vector<std::string>    parts_;
};


/**
 * @brief Support for '<part:*>' configuration node.
 */ 
class body_part_cfg
: public cfg_base
{
public:        
    /**
     * @param[in] c         Configuration object
     * @param[in] k         Kernel object
     */
    body_part_cfg(configuration& c, kernel& k,
        float density, float restitution, float friction)
    : config_(c)
    , kernel_(k)
    , type_(INVALID_TYPE)
    , radius_(0.0f)
    , density_(density)
    , restitution_(restitution)
    , friction_(friction)
    {
    }

    void bottom_left(const size& bl)
    {
        bl_ = bl;
    }
    
    void top_right(const size& tr)
    {
        tr_ = tr;
    }
    
    void radius(const float& r)
    {
        radius_ = r;
    }
    
    void type(const body_part_type& t)
    {
        type_ = t;
    }
    
    /**
     * Create a new part instance and return it without saving a local copy.
     */
    boost::shared_ptr<body_part> create(const boost::shared_ptr<body>& b);        
  
private:                
    configuration&              config_;
    kernel&                     kernel_;
    
    body_part_type              type_;
    size                        bl_;
    size                        tr_;
    float                       radius_;
    float                       density_;
    float                       restitution_;
    float                       friction_;
};
