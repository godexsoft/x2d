//
//  physics.incl
//  x2d
//
//  Created by Alex Kremer on 1/7/12.
//  Copyright (c) 2012 godexsoft. All rights reserved.
//

class body_part_cfg;

/**
 * @brief Support for '<body>' configuration node.
 */ 
class body_cfg
: public cfg_base
{
public:        
    /**
     * @param[in] c         Configuration object
     * @param[in] k         Kernel object
     * @param[in] dynamic   Whether body is dynamic
     */
    body_cfg(configuration& c, kernel& k, bool dynamic)
    : config_(c)
    , kernel_(k)
    , dynamic_(dynamic)
    {        
    }
    
    /**
     * Create a new body instance and return it without saving a local copy.
     */
    boost::shared_ptr<body> create(object& obj);        
                            
    void add(const std::string& part_key) 
    {
        parts_.push_back(part_key);
    }
    
    void set_dynamic(const bool dynamic)
    {
        dynamic_ = dynamic;
    }
    
private:                
    configuration&              config_;
    kernel&                     kernel_;
    
    bool                        dynamic_;    
    std::vector<std::string>    parts_;
};


/**
 * @brief Support for '<part:*>' configuration node.
 */ 
class body_part_cfg
: public cfg_base
{
public:        
    /**
     * @param[in] c         Configuration object
     * @param[in] k         Kernel object
     */
    body_part_cfg(configuration& c, kernel& k, size& bottomLeft, size& topRight,
        float density, float restitution, float friction)
    : config_(c)
    , kernel_(k)
    , bl_(bottomLeft)
    , tr_(topRight)
    , density_(density)
    , restitution_(restitution)
    , friction_(friction)
    {
    }
    
    /**
     * Create a new part instance and return it without saving a local copy.
     */
    boost::shared_ptr<body_part> create(const boost::shared_ptr<body>& b);        
  
private:                
    configuration&              config_;
    kernel&                     kernel_;
    
    size                        bl_;
    size                        tr_;
    float                       density_;
    float                       restitution_;
    float                       friction_;
};
