//
//  object.incl
//  x2d
//
//  Created by Alex Kremer on 1/7/12.
//  Copyright (c) 2012 godexsoft. All rights reserved.
//

/**
 * @brief Support for '<object>' configuration node.
 */ 
class object_cfg
: public cfg_base
{
public:        
    /**
     * @param[in] c         Configuration object
     */
    object_cfg(configuration& c)
    : config_(c)
    {        
    }
    
    /**
     * Create a new custom type object and return a shared_ptr containing it
     */
    template <typename T>
    const boost::shared_ptr<T> create()
    {
        return boost::shared_ptr<T>( new T(config_, traits_) );            
    }
    
    /**
     * Create a new custom type object relative to spawner 
     * and return a shared_ptr containing it
     */
    template <typename T>
    const boost::shared_ptr<T> create(spawner* spwn)
    {
        return boost::shared_ptr<T>( new T(config_, traits_, spwn) );
    }
    
    /**
     * Create a new object and return a shared_ptr containing it.
     */
    const boost::shared_ptr<object> create()
    {
        return boost::shared_ptr<object>( new object(config_, traits_) );
    }

    /**
     * Create a new object relative to spawner 
     * and return a shared_ptr containing it.
     */
    const boost::shared_ptr<object> create(spawner* spwn)
    {
        return boost::shared_ptr<object>( new object(config_, traits_, spwn) );
    }
    
    /**
     * Add a child object.
     * @param[in] k Configuration key of child object
     */
    void add(const config_key& k)
    {
        traits_.children.push_back(k);
    }
    
    /**
     * Get currently parsed object traits.
     */
    const object_traits get_traits() const
    {
        return traits_;
    }
    
    /**
     * Set new traits for the object
     */
    void set_traits(const object_traits& t)
    {
        traits_ = t;
    }
    
private:                
    configuration&              config_;
    object_traits               traits_;        
};
