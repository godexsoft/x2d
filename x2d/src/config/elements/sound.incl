//
//  sound.incl
//  x2d
//
//  Created by Alex Kremer on 1/7/12.
//  Copyright (c) 2012 godexsoft. All rights reserved.
//

/**
 * @brief Support for '<music>' configuration node.
 */ 
class music_cfg
: public cfg_base
{
public:  
    /**
     * @param[in] rm     Resource manager
     * @param[in] k      The kernel
     * @param[in] path   Path to resource
     * @param[in] loop   Loop the music? true or false
     * @param[in] gain   Volume level
     */
    music_cfg(resource_manager& rm, kernel& k, const std::string& path, 
              bool loop, float gain, float fade_in, float fade_out,
              float start, float end)
    : res_man_(rm)
    , kernel_(k)
    , path_(path)
    , loop_(loop)
    , gain_(gain)
    , fade_in_(fade_in)
    , fade_out_(fade_out)
    , start_(start)
    , end_(end)
    {                        
    }
    
    /**
     * Create if required and return a shared version of the music.
     */
    boost::shared_ptr<music> get()
    {
        if( boost::shared_ptr<music> p = inst_.lock() )
        {            
            // already exists outside of cfg
            return p;
        }
        else
        {
            boost::shared_ptr<music> r = 
                boost::shared_ptr<music>( new music(kernel_, res_man_.get<ifdstream>(path_), 
                    loop_, gain_, fade_in_, fade_out_, start_, end_) );
            inst_ = r;
            return r;
        }
    }
    
private:
    resource_manager&       res_man_;
    kernel&                 kernel_;
    const std::string       path_;
    bool                    loop_;
    float                   gain_;
    float                   fade_in_;
    float                   fade_out_;
    float                   start_;
    float                   end_;
    
    boost::weak_ptr<music>  inst_;
};

/**
 * @brief Support for '<sfx>' configuration node.
 */ 
class sfx_cfg
: public cfg_base
{
public:  
    /**
     * @param[in] conf   The configuration
     * @param[in] path   Path to resource
     * @param[in] loop   Loop the sfx? true or false
     * @param[in] pitch  Pitch for the sfx
     */
    sfx_cfg(configuration& conf, const std::string& path, 
            bool loop, const value<float>& pitch)
    : config_(conf)
    , path_(path)
    , loop_(loop)
    , pitch_(pitch)
    {                        
    }
    
    /**
     * Create if required and return a shared version of the sfx.
     */
    boost::shared_ptr<sfx> get();
    
private:
    configuration&             config_;
    const std::string          path_;
    bool                       loop_;
    value<float>               pitch_;
    
    boost::weak_ptr<sfx>       inst_;
};